#!/usr/bin/env python

import hashlib
import os
import sys
import time

MAX_ITERS = 1000000000

def leading_zeroes(byte_array):
    i = 0

    # Iter until first non-zero value byte
    while(byte_array[i] == 0):
        i = i + 1
    num_zeroes = i * 8

    # Now count num of leading zeroes within byte
    byte = byte_array[i]
    i = 1

    while(byte >= (1 << i)):
        i = i + 1

    num_zeroes = num_zeroes + (8 - i)
    return num_zeroes

# Generate the next prefix
first_char = 40     # First 'legal' char
last_char = 125     # Last 'legal' char
curr_prefix = bytearray()
def next():
    global curr_prefix
    i = len(curr_prefix) - 1
    
    while(i >= 0):
        if(curr_prefix[i] > first_char):
            curr_prefix[i] -= 1
            break
        else:
            i -= 1

    for x in range(i + 1, len(curr_prefix)):
        curr_prefix[x] = last_char
    if(i < 0):
        curr_prefix.append(last_char)
    return curr_prefix


def main():

    if len(sys.argv) != 3:
        print("error: Incorrect number of arguments.")
        sys.exit()

    if not sys.argv[1].isdigit():
        print("error: nbits is a non-integer value.")
        sys.exit()

    difficulty = int(sys.argv[1])

    file_path = sys.argv[2]
    if not os.path.isfile(file_path):
        print("File path {} does not exist. Aborting.").format(file_path)
        sys.exit()
    
    print("File: " + file_path)

    start = time.time()

    hash_function = hashlib.sha256()

    with open(file_path) as file:
        for line in file:
            hash_function.update(line)
    
    base_hash = hash_function.hexdigest()
    print('Initial-hash: ' + base_hash)

    iters = 0
    num_zeroes = 0
    hash = None
    prefix = next()
    max_num = 1 << (256 - difficulty)

    while(iters < MAX_ITERS):
        iters += 1
        hash = hashlib.sha256(prefix + '' + base_hash).hexdigest()

        if (int(hash, 16) < max_num):
            num_zeroes = leading_zeroes(bytearray.fromhex(hash))
            break
        prefix = next()     # Change each char one by one and then add more

    if(num_zeroes < difficulty):
        print("Failed to find a prefix within " + str(MAX_ITERS) + ' iterations.')
    else:
        print('Proof-of-work: ' + prefix)
        print('Hash: ' + hash)
        print('Leading-bits: ' + str(num_zeroes))
        print('Iterations: ' + str(iters))

    end = time.time()
    print('Compute-time: ' + str(end - start))

if __name__ == "__main__":
    main()